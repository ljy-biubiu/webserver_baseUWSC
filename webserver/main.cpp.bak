// Copyright (c) 2022，Horizon Robotics.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "rclcpp/rclcpp.hpp"
#include "third_party/uWSC/include/uWS.h"
#include <string>
#include <iostream>
#include <queue>
#include <mutex>
#include <thread>

using namespace std;


int main()
{
  uWS::Hub h;
  uWS::WebSocket<uWS::SERVER> *server;

  
  /*设置回调*/
  h.onMessage([](uWS::WebSocket<uWS::SERVER> *ws, char *message, size_t length, uWS::OpCode opCode)
              { printf("server recv:%s\n", message); });

  h.onDisconnection([](uWS::WebSocket<uWS::SERVER> *ws, int code, char *message, size_t length)
                    { printf("client closed!\n"); });
  h.onConnection([&server](uWS::WebSocket<uWS::SERVER> *ws, uWS::HttpRequest req)
                 {
        printf("onConnection\n");
        server = ws; });
  h.onError([](void *user)
            { printf("FAILURE: Connection %s failed! Timeout?\n", (char *)user); });


  h.listen(3001);

  queue<string> msgQ;
  std::mutex mt;
  /*新建线程只用于发消息*/
  std::thread sendMsg([&msgQ, &mt]()
                      {
  while(1)
  {
      char res[512] = {0};
      fgets(res,sizeof(res)-1,stdin);
      printf("send to client:%s",res);
      string msg(res,strlen(res));
      mt.lock();
      msgQ.push(msg);
      mt.unlock();
      if(!strncasecmp(res,"bye",3))
          break;
  } });

  while (1)
  {
    if (!msgQ.empty())
    {
      mt.lock();
      string msg = msgQ.front();
      msgQ.pop();
      mt.unlock();
      server->send(msg.c_str(), msg.size(), uWS::OpCode::TEXT);
      // if (!strncasecmp(msg.c_str(), "bye", 3))
      // {
      //   server->close();
      //   exit(1);
      // }
    }
    h.poll();
    usleep(200); //防止占用过多cpu
  }
}

// int main(int argc, char *argv[]) {
//   rclcpp::init(argc, argv);
//   auto nh = std::make_shared<rclcpp::Node>("websocket");
//   //websocket::Websocket web_socket(nh);
//   rclcpp::spin(nh);
//   rclcpp::shutdown();
// }


//不能删，没有这个会报缺少文件  
void test(uWS::Hub h,std::atomic<int> expectedRequests)
{
  auto controlData = [&h, &expectedRequests](uWS::HttpResponse *res, char *data, size_t length, size_t remainingBytes)
  {
    res->end();
  };
  h.onHttpData([&controlData](uWS::HttpResponse *res, char *data, size_t length, size_t remainingBytes)
               { controlData(res, data, length, remainingBytes); });
}